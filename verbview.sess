let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/dotfile
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +22 verb.txt
argglobal
silent! argdel *
$argadd verb.txt
edit verb.txt
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
9wincmd h
wincmd w
wincmd w
wincmd w
wincmd w
wincmd w
wincmd w
wincmd w
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=1 winminwidth=1 winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 20 + 95) / 190)
exe 'vert 2resize ' . ((&columns * 20 + 95) / 190)
exe 'vert 3resize ' . ((&columns * 16 + 95) / 190)
exe 'vert 4resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 5resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 6resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 7resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 8resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 9resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 10resize ' . ((&columns * 17 + 95) / 190)
argglobal
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 20 - ((19 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
20
normal! 02|
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 100 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
100
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 200 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
200
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 532 - ((1 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
532
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 300 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
300
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 400 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
400
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 500 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
500
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 600 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
600
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 700 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
700
normal! 0
wincmd w
argglobal
if bufexists('verb.txt') | buffer verb.txt | else | edit verb.txt | endif
setlocal fdm=marker
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 800 - ((21 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
800
normal! 0
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 20 + 95) / 190)
exe 'vert 2resize ' . ((&columns * 20 + 95) / 190)
exe 'vert 3resize ' . ((&columns * 16 + 95) / 190)
exe 'vert 4resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 5resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 6resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 7resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 8resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 9resize ' . ((&columns * 18 + 95) / 190)
exe 'vert 10resize ' . ((&columns * 17 + 95) / 190)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOF
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
